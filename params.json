{"name":"Demo","tagline":"Reference implementation of the Nielsen App API (iOS)","body":"# Nielsen App API SDK Implementation\r\n\r\nThis document will guide you through implementing the Nielsen App API SDK.  Read Nielsen's [Engineering Client Portal](http://engineeringforum.nielsen.com/sdk/developers/) for more details and documentation.\r\n\r\n\r\n## Implementing the SDK\r\n\r\n\r\n### Configure the Nielsen App SDK\r\n\r\n\r\n#### Frameworks\r\n\r\nAdd the following to Linked Frameworks and Libraries:\r\n\r\n* CoreMedia\r\n* AVFoundation\r\n* Security\r\n* SystemConfiguration\r\n* AdSupport\r\n* Foundation\r\n* UIKit\r\n* CoreLocation\r\n* libsqlite3.dylib\r\n* NielsenAppApi\r\n\r\n\r\n#### Build Settings\r\n\r\nNavigate to Build Settings > Linking > Other Linker Flags and add lstdc++ for Any Architecture | Any SDK.\r\n\r\n\r\n### Instantiate the SDK\r\n\r\n`[NielsenAppApi initWithAppInfo:delegate:]` expects a `JSON` formatted string, which we construct from a dictionary below.  Delegate methods are documented later in this tutorial.\r\n\r\n    NSDictionary *nielsenConfig = @{\r\n        @\"appid\": @\"T6DABF79D-CE15-4A47-A201-4E7DFE0F7EF0\",\r\n        @\"appversion\": @\"1.0\",\r\n        @\"appname\": @\"SDK Demo\",\r\n        @\"sfcode\": @\"uat\"\r\n    };\r\n    NSData *jsonDataNielsenConfig = [NSJSONSerialization dataWithJSONObject:nielsenConfig options:0 error:nil];\r\n    NSString *jsonStringNielsenConfig = [[NSString alloc] initWithBytes:[jsonDataNielsenConfig bytes] length:[jsonDataNielsenConfig length] encoding:NSUTF8StringEncoding];\r\n    nielsenMeter = [[NielsenAppApi alloc] initWithAppInfo:jsonStringNielsenConfig delegate:self];\r\n\r\n\r\n### Player Configuration\r\n\r\n`[NielsenAppApi play:]` expects a `JSON` formatted string, which we construct from a dictionary below.\r\n\r\n    NSDictionary *playerInfoDict = @{\r\n        @\"channelName\": @\"Video Demo\",\r\n        @\"adModel\": @\"2\",\r\n        @\"dataSrc\": @\"cms\"\r\n    };\r\n    NSData *playerInfoData = [NSJSONSerialization dataWithJSONObject:playerInfoDict options:0 error:nil];\r\n    playerInfo = [[NSString alloc] initWithBytes:[playerInfoData bytes] length:[playerInfoData length] encoding:NSUTF8StringEncoding];\r\n\r\n\r\n### Asset Metadata Configuration\r\n\r\n`[NielsenAppApi loadMetadata:]` expects a `JSON` formatted string, which we construct from a dictionary below.\r\n\r\n    NSURL *url = [NSURL URLWithString:@\"http://nielsense-assets.s3.amazonaws.com/id3/001/prog_index.m3u8\"];\r\n    NSDictionary *assetInfoDict = @{\r\n        @\"type\": @\"content\",\r\n        @\"assetid\": @\"demo\",\r\n        @\"tv\": @\"true\",\r\n        @\"program\": @\"Demo Program\",\r\n        @\"title\": @\"Demo Episode\",\r\n        @\"category\": @\"test\",\r\n        @\"adModel\": @\"2\",\r\n        @\"dataSrc\": @\"cms\"\r\n    };\r\n    NSData *assetInfoData = [NSJSONSerialization dataWithJSONObject:assetInfoDict options:0 error:nil];\r\n    assetInfo = [[NSString alloc] initWithBytes:[assetInfoData bytes] length:[assetInfoData length] encoding:NSUTF8StringEncoding];\r\n\r\n\r\n### Implement KVO\r\n\r\nRegister key-value observers on the player's `status` and `rate` keys.  If you're using ID3 encoded media, register `currentItem.timedMetadata`.\r\n\r\nRead Apple's [Introduction to Key-Value Observing Programming Guide](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html) for an overview of KVO.\r\n\r\n    [self.avPlayerViewcontroller.player addObserver:self forKeyPath:@\"status\" options:0 context:nil];\r\n    [self.avPlayerViewcontroller.player addObserver:self forKeyPath:@\"rate\" options:0 context:nil];\r\n    [self.avPlayerViewcontroller.player addObserver:self forKeyPath:@\"currentItem.timedMetadata\" options:0 context:nil];\r\n\r\n\r\n### Updating Playhead Position \r\n\r\nObserve player every 2 seconds and update `[NielsenAppApi playheadPosition:]`.\r\n\r\n    CMTime i = CMTimeMakeWithSeconds(2.0, NSEC_PER_SEC);\r\n    __weak typeof(self) weakSelf = self;\r\n    [self.avPlayerViewcontroller.player addPeriodicTimeObserverForInterval:i queue:dispatch_get_main_queue() usingBlock:^(CMTime time) {\r\n        NSLog(@\"Update playhead position\");\r\n        CMTime t = [weakSelf.avPlayerViewcontroller.player currentTime];\r\n        long position = CMTimeGetSeconds(t);\r\n        [nielsenMeter playheadPosition:position];\r\n    }];\r\n\r\n\r\n### Observing Play and Pause Events\r\n\r\nWatch the playback rate for changes to handle pauses.  A rate of 0 is paused.  1 is normal playback.\r\n\r\n    if ([path isEqualToString:@\"rate\"]) {\r\n        if ([self.avPlayerViewcontroller.player rate]) {\r\n            NSLog(@\"Unpaused.\");\r\n            [nielsenMeter play:playerInfo];\r\n            [nielsenMeter loadMetadata:assetInfo];\r\n        } else {\r\n            NSLog(@\"Paused.\");\r\n            [nielsenMeter stop];\r\n        }\r\n\r\n\r\n### Play Asset\r\n\r\nObserve `status` key to play asset once loaded.\r\n\r\n    } else if ([path isEqualToString:@\"status\"]) {\r\n        if (self.avPlayerViewcontroller.player.status == AVPlayerItemStatusReadyToPlay) {\r\n            NSLog(@\"Ready to play\");\r\n            [self.avPlayerViewcontroller.player play];\r\n            [nielsenMeter play:playerInfo];\r\n        }\r\n\r\n\r\n### ID3 Metadata\r\n\r\nObserve `currentItem.timedMetadata` and parse ID3 data when fired.\r\n\r\n    } else if ([path isEqualToString:@\"currentItem.timedMetadata\"]) {\r\n        NSLog(@\"Parsing ID3 content.\");\r\n        for (AVMetadataItem *metadataItem in [[player currentItem] timedMetadata]) {\r\n            id extraAttributeType = [metadataItem extraAttributes];\r\n            NSString *extraString = nil;\r\n            if ([extraAttributeType isKindOfClass:[NSDictionary class]]) {\r\n                extraString = [extraAttributeType valueForKey:@\"info\"];\r\n            }\r\n            else if ([extraAttributeType isKindOfClass:[NSString class]]) {\r\n                extraString = extraAttributeType;\r\n            }\r\n            if ([(NSString *)[metadataItem key] isEqualToString:@\"PRIV\"] && [extraString rangeOfString:@\"www.nielsen.com\"].length > 0) {\r\n                if ([[metadataItem value] isKindOfClass:[NSData class]]) {\r\n                    [nielsenMeter sendID3:extraString];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n### Implement Delegate Methods\r\n\r\nImplement `[NielsenAppApi eventOccurred:]` and `[NielsenAppApi errorOccurred:]` in order to fulfill the Nielsen App API delegate.  Don't forget to add `<NielsenAppApiDelegate>` to your view controller's `@interface`.\r\n\r\n    - (void)nielsenAppApi:(NielsenAppApi *)appApi eventOccurred:(NSDictionary *)event {\r\n        NSLog(@\"Sample player is Notified by a Event : %@\", event);\r\n    }\r\n\r\n    - (void)nielsenAppApi:(NielsenAppApi *)appApi errorOccurred:(NSDictionary *)error {\r\n        NSLog(@\"Sample player is Notified by an Error : %@\", error);\r\n    }\r\n\r\n\r\n## Implement User Opt Out\r\n\r\nYour app must provide a means for the user to opt-out of, or opt back into, Nielsen Measurement. To implement the opt-out option, you must include a web view within the app which loads the URL returned by optOutURLString:.  Redirecting the user from app to Safari is not an acceptable implementation.  The URL must be loaded in a web view within your app.\r\n\r\n    WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];\r\n    webView = [[WKWebView alloc] initWithFrame:self.view.frame configuration:configuration];\r\n    webView.navigationDelegate = self;\r\n    NSURL *url = [NSURL URLWithString:[nielsenMeter optOutURLString]];\r\n    NSURLRequest *request = [NSURLRequest requestWithURL:url];\r\n    [webView loadRequest:request];\r\n\r\nNotify the SDK of the userâ€™s selection by passing the URL to userOptOut.\r\n\r\n    NSString *finalURL = [NSString stringWithFormat:@\"%@\", webView.URL];\r\n    [nielsenMeter userOptOut:finalURL];\r\n\r\n\r\n## Getting Help\r\n\r\nReach out to SalesEngineeringGlobal@nielsen.com or visit Nielsen's [Engineering Client Portal](http://engineeringforum.nielsen.com/sdk/developers/) for more information.\r\n","google":"UA-66429798-1","note":"Don't delete this file! It's used internally to help with page regeneration."}